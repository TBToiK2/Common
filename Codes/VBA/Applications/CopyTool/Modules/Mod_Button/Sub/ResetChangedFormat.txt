'----------------------------------------------------------------------------------------------------
Public Sub ResetChangedFormat(Target As Range)

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False

    If ActiveSheet.CodeName = "Main" Then Exit Sub

    Dim ws As Worksheet
    Set ws = ActiveSheet
    With ws

        'シート プロテクト解除
        Call .Unprotect(PASS)

        Dim ComRange As Range, FileRange As Range
        Set ComRange = .Range(.Cells(3, 3), .Cells(8, 4))
        Set FileRange = .Range(.Cells(13, 3), .Cells(19, 4))

        '共通内範囲 存在確認
        Dim IntersectComRange As Range
        Set IntersectComRange = Intersect(ComRange, Target)
        If Not IntersectComRange Is Nothing Then

            Dim ComValidationRange As Range
            Dim ComFormatCopyRange As Range, ComMarkRange As Range
            Set ComValidationRange = .Range(.Cells(3, 3), .Cells(7, 4))
            Set ComFormatCopyRange = .Range(.Cells(4, 3), .Cells(4, 3))
            Set ComMarkRange = .Range(.Cells(8, 3), .Cells(8, 4))

            With IntersectComRange

                '書式 設定
                .Font.Size = 10
                .HorizontalAlignment = xlHAlignCenter
                With .Borders
                    .Color = vbBlack
                    .Weight = xlThin
                    .LineStyle = xlContinuous
                End With

                '結合 設定
                If Not .MergeCells Or IsNull(.MergeCells) Then
                    If .Columns.Count = 1 Then
                        Call .Resize(, 2).Merge(True)
                    Else
                        Call .Merge(True)
                    End If
                End If

                '入力規則内範囲 存在確認
                Dim IntersectComValidationRange As Range
                Set IntersectComValidationRange = Intersect(IntersectComRange, ComValidationRange)
                If Not IntersectComValidationRange Is Nothing Then

                    '入力規則 設定
                    With IntersectComValidationRange.Validation
                        Call .Delete
                        Call .Add(xlValidateList, xlValidAlertStop, xlEqual, "する, しない")
                    End With
                    
                    '条件付き書式 設定
                    With ComValidationRange.FormatConditions

                        Call .Delete

                        Dim ComAddCondition As FormatCondition
                        Set ComAddCondition = .Add(xlBlanksCondition)
                        ComAddCondition.Interior.Color = vbRed
                    End With
                End If

                '書式コピー内範囲 存在確認
                If Not Intersect(IntersectComRange, ComFormatCopyRange) Is Nothing Then

                    'コピーセル文字, 背景色項目 活性設定
                    Dim HiddenFLG As Boolean
                    If ConvertTrueFalse(ComFormatCopyRange.Value, HiddenFLG) Then
                        ws.Shapes("Rct_Hidden").Visible = HiddenFLG
                    Else
                        ws.Shapes("Rct_Hidden").Visible = False
                    End If
                End If

                'コピー変更行マーク内範囲 存在確認
                Dim IntersectComMarkRange As Range
                Set IntersectComMarkRange = Intersect(IntersectComRange, ComMarkRange)
                If Not IntersectComMarkRange Is Nothing Then
                    With IntersectComMarkRange

                        '入力規則 設定
                        Call .Validation.Delete

                        '条件付き書式 設定
                        Call .FormatConditions.Delete
                    End With
                End If
            End With
        End If

        'ファイル別内範囲 存在確認
        Dim IntersectFileRange As Range
        Set IntersectFileRange = Intersect(FileRange, Target)
        If Not IntersectFileRange Is Nothing Then

            Dim FileConditionRange As Range
            Dim FileNameRange As Range, FileRowColRange As Range, FilePassRange As Range
            Dim FileFRange As Range, FileTRange As Range
            Set FileConditionRange = .Range(.Cells(13, 3), .Cells(18, 4))
            Set FileNameRange = .Range(.Cells(13, 3), .Cells(13, 4))
            Set FileRowColRange = .Range(.Cells(15, 3), .Cells(18, 4))
            Set FilePassRange = .Range(.Cells(19, 3), .Cells(19, 4))
            Set FileFRange = .Range(.Cells(13, 3), .Cells(19, 3))
            Set FileTRange = .Range(.Cells(13, 4), .Cells(19, 4))

            With IntersectFileRange

                '書式 設定
                .Font.Size = 10
                .HorizontalAlignment = xlHAlignGeneral
                With .Borders
                    .Color = vbBlack
                    .Weight = xlThin
                    .LineStyle = xlContinuous
                End With

                '結合 設定
                Call .UnMerge

                '入力規則 設定
                .Validation.Delete

                '条件付き書式内範囲 存在確認
                Dim IntersectFileConditionRange As Range
                Set IntersectFileConditionRange = Intersect(IntersectFileRange, FileConditionRange)
                If Not IntersectFileConditionRange Is Nothing Then

                    ' 条件付き書式 設定
                    With FileConditionRange.FormatConditions

                        Call .Delete

                        Dim FileAddCondition As FormatCondition
                        Set FileAddCondition = .Add(xlBlanksCondition)
                        FileAddCondition.Interior.Color = vbRed
                    End With
                End If

                'ファイル名内範囲 存在確認
                Dim IntersectFileNameRange As Range
                Set IntersectFileNameRange = Intersect(IntersectFileRange, FileNameRange)
                If Not IntersectFileNameRange Is Nothing Then

                    '書式 設定
                    IntersectFileNameRange.WrapText = True
                End If

                '行列内範囲 存在確認
                Dim IntersectFileRowColRange As Range
                Set IntersectFileRowColRange = Intersect(IntersectFileRange, FileRowColRange)
                If Not IntersectFileRowColRange Is Nothing Then

                    '書式 設定
                    IntersectFileRowColRange.HorizontalAlignment = xlHAlignCenter
                End If

                'パスワード内範囲 存在確認
                Dim IntersectFilePassRange As Range
                Set IntersectFilePassRange = Intersect(IntersectFileRange, FilePassRange)
                If Not IntersectFilePassRange Is Nothing Then
                    With IntersectFilePassRange

                        '条件付き書式 設定
                        Call .FormatConditions.Delete

                        '書式 設定
                        .Borders(xlEdgeBottom).Weight = xlMedium
                    End With
                End If

                'コピー元パラメータ内範囲 存在確認
                Dim IntersectFileFRange As Range
                Set IntersectFileFRange = Intersect(IntersectFileRange, FileFRange)
                If Not IntersectFileFRange Is Nothing Then

                    '書式 設定
                    IntersectFileFRange.Borders(xlEdgeRight).LineStyle = xlDash
                End If

                'コピー先パラメータ内範囲 存在確認
                Dim IntersectFileTRange As Range
                Set IntersectFileTRange = Intersect(IntersectFileRange, FileTRange)
                If Not IntersectFileTRange Is Nothing Then

                    '書式 設定
                    IntersectFileTRange.Borders(xlEdgeLeft).LineStyle = xlDash
                End If
            End With
        End If

        'シート プロテクト
        Call .Protect(PASS, UserInterfaceOnly:=True, AllowFormattingCells:=True, AllowInsertingRows:=True, AllowDeletingRows:=True, AllowSorting:=True, AllowFiltering:=True)

    End With

    Application.DisplayAlerts = False
    Application.ScreenUpdating = True

End Sub
'----------------------------------------------------------------------------------------------------